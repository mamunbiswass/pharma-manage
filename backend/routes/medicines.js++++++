const express = require("express");
const router = express.Router();
const db = require("../db"); // mysql2/promise pool

// ✅ Get all medicines with JOIN
router.get("/", async (req, res) => {
  try {
    const [results] = await db.query(
      `SELECT 
          m.id,
          m.name,
          c.name AS category,
          mf.name AS manufacturer,
          u.name AS unit,
          s.name AS supplier,
          m.purchase_price,
          m.sale_price,
          m.mrp_price,
          m.quantity,
          m.reorder_level,
          m.gst_rate,
          m.hsn_code,
          m.pack_size,
          DATE_FORMAT(m.expiry_date, '%Y-%m-%d') as expiry_date
       FROM medicines m
       LEFT JOIN categories c ON m.category_id = c.id
       LEFT JOIN manufacturers mf ON m.manufacturer_id = mf.id
       LEFT JOIN units u ON m.unit_id = u.id
       LEFT JOIN suppliers s ON m.supplier_id = s.id
       ORDER BY m.id DESC`
    );
    res.json(results);
  } catch (err) {
    console.error("Fetch error:", err);
    res.status(500).send(err);
  }
});

// ✅ Get single medicine by id with JOIN
router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const [results] = await db.query(
      `SELECT 
          m.id,
          m.name,
          c.id AS category_id,
          c.name AS category,
          mf.id AS manufacturer_id,
          mf.name AS manufacturer,
          u.id AS unit_id,
          u.name AS unit,
          s.id AS supplier_id,
          s.name AS supplier,
          m.purchase_price,
          m.sale_price,
          m.mrp_price,
          m.quantity,
          m.reorder_level,
          m.gst_rate,
          m.hsn_code,
          m.pack_size,
          DATE_FORMAT(m.expiry_date, '%Y-%m-%d') as expiry_date
       FROM medicines m
       LEFT JOIN categories c ON m.category_id = c.id
       LEFT JOIN manufacturers mf ON m.manufacturer_id = mf.id
       LEFT JOIN units u ON m.unit_id = u.id
       LEFT JOIN suppliers s ON m.supplier_id = s.id
       WHERE m.id = ?`,
      [id]
    );

    if (results.length === 0) {
      return res.status(404).json({ message: "Medicine not found" });
    }
    res.json(results[0]);
  } catch (err) {
    console.error("Fetch single error:", err);
    res.status(500).send(err);
  }
});

// ✅ Add single medicine (IDs save হবে)
router.post("/", async (req, res) => {
  try {
    const {
      name,
      category_id,
      manufacturer_id,
      purchase_price,
      sale_price,
      mrp_price,
      quantity,
      reorder_level,
      gst_rate,
      hsn_code,
      pack_size,
      expiry_date,
      supplier_id,
      unit_id,
      batch_no,
    } = req.body;

    const [result] = await db.query(
      `INSERT INTO medicines 
        (name, category_id, manufacturer_id, supplier_id, unit_id, pack_size, hsn_code, gst_rate, batch_no,
         purchase_price, sale_price, mrp_price, quantity, reorder_level, expiry_date) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        name,
        category_id,
        manufacturer_id,
        supplier_id,
        unit_id,
        pack_size,
        hsn_code,
        gst_rate,
        batch_no,
        purchase_price,
        sale_price,
        mrp_price,
        quantity,
        reorder_level,
        expiry_date,
      ]
    );

    res.json({ id: result.insertId, ...req.body });
  } catch (err) {
    console.error("Insert error:", err);
    res.status(500).send(err);
  }
});

// ✅ Update medicine (IDs use হবে)
router.put("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const {
      name,
      category_id,
      manufacturer_id,
      supplier_id,
      unit_id,
      pack_size,
      hsn_code,
      gst_rate,
      batch_no,
      purchase_price,
      sale_price,
      mrp_price,
      quantity,
      reorder_level,
      expiry_date,
    } = req.body;

    const sql = `
      UPDATE medicines SET
        name = ?,
        category_id = ?,
        manufacturer_id = ?,
        supplier_id = ?,
        unit_id = ?,
        pack_size = ?,
        hsn_code = ?,
        gst_rate = ?,
        batch_no = ?,
        purchase_price = ?,
        sale_price = ?,
        mrp_price = ?,
        quantity = ?,
        reorder_level = ?,
        expiry_date = ?
      WHERE id = ?
    `;

    await db.query(sql, [
      name,
      category_id,
      manufacturer_id,
      supplier_id,
      unit_id,
      pack_size,
      hsn_code,
      gst_rate,
      batch_no,
      purchase_price,
      sale_price,
      mrp_price,
      quantity,
      reorder_level,
      expiry_date,
      id,
    ]);

    res.json({ message: "Medicine updated successfully!" });
  } catch (err) {
    console.error("Update error:", err);
    res.status(500).json({ message: "Database error", error: err });
  }
});

// ✅ Delete medicine
router.delete("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    await db.query("DELETE FROM medicines WHERE id = ?", [id]);
    res.json({ message: "Medicine deleted successfully!" });
  } catch (err) {
    console.error("Delete error:", err);
    res.status(500).json({ message: "Database error", error: err });
  }
});

// ✅ Get low stock medicines (Reorder Alert)
router.get("/reorder-alert", async (req, res) => {
  try {
    const [rows] = await db.query(
      `SELECT 
          m.id, m.name, c.name AS category, s.name AS supplier, 
          m.quantity, m.reorder_level,
          DATE_FORMAT(m.expiry_date, '%Y-%m-%d') as expiry_date,
          u.name AS unit_name
       FROM medicines m
       LEFT JOIN categories c ON m.category_id = c.id
       LEFT JOIN suppliers s ON m.supplier_id = s.id
       LEFT JOIN units u ON m.unit_id = u.id
       WHERE m.quantity <= m.reorder_level`
    );

    if (rows.length === 0) {
      return res.json({ message: "✅ All medicines are above reorder level", medicines: [] });
    }

    res.json({ message: "⚠ Low stock medicines found", medicines: rows });
  } catch (err) {
    console.error("Reorder alert error:", err);
    res.status(500).json({ message: "Database error", error: err });
  }
});

module.exports = router;
